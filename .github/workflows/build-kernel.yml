name: GKI Kernel Build
permissions:
  contents: write
  actions: write 

on:
  workflow_dispatch:
    inputs:
      kernelsu_variant:
        description: "Select KernelSU"
        required: true
        type: choice
        options:
          - 'KernelSU-Next'
          - 'SukiSU-Ultra'
        default: 'SukiSU-Ultra'
      hook:
        type: choice
        description: "Select Hook"
        required: true
        options:
          - 'Manual'
          - 'Tracepoint'
          - 'Kprobes'
        default: 'Manual'
      android_version:
        description: "Select Android Version"
        required: true
        type: choice
        options:
          - 'android15'
        default: 'android15'
      kernel_version:
        description: "Select Kernel Version"
        required: true
        type: choice
        options:
          - '6.6.30'
          - '6.6.56'
        default: '6.6.56'
      use_bbr:
        description: 'Enable the BBR Algorithms?'
        required: true
        type: boolean
        default: true
      use_lsm:
        description: "Enable kernel-level LSM to prevent illegal writes to critical partitions/device nodes"
        required: true
        type: boolean
        default: true
      use_zram:
        description: 'Enable adding more ZRAM Algorithms?'
        required: true
        type: boolean
        default: true
      upload_tg:
        description: 'Upload files AK3 to telegram?'
        required: true
        type: boolean
        default: false

jobs:
 build-kernel-kernelsu-susfs:
    name: build-kernel-${{ inputs.android_version }}-${{ inputs.kernel_version }}
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Maximize Build Space
        uses: TukangHantam/maximize-build-space@main
        with:
          remove-dotnet: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true
          
      - name: 📊 Check disk space
        run: |
          echo "Available storage:"
          sudo df -h
          
      - name: Configure Git
        run: |
          git config --global user.name "hxmn404"
          git config --global user.email "kangbuilder404@gmail.com"
          
      - name: Install Dependencies
        run: |
          sudo apt-mark hold firefox
          sudo apt-mark hold libc-bin
          sudo apt purge man-db
          sudo rm -rf /var/lib/man-db/auto-update
          sudo apt update
          sudo apt-get install -y --no-install-recommends \
            curl bison flex make binutils git perl gcc python3 \
            python-is-python3 bc libssl-dev libelf-dev \
            bc aria2 zip unzip ccache
          #ccache python3 git curl build-essential libssl-dev bison flex libelf-dev aria2 unzip zip

      - name: Set up ccache
        run: |
          ccache --version
          ccache --max-size=3G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache_${{ inputs.android_version }}-${{ inputs.kernel_version }}" >> $GITHUB_ENV
          #mkdir -p $HOME/.ccache_${{ inputs.android_version }}-${{ inputs.kernel_version }}/bazel

      - name: Restore ccache from cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ inputs.android_version }}-${{ inputs.kernel_version }}
          
      - name: Install Repo
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+rx ~/repo
          sudo mv ~/repo /usr/local/bin/repo
          
      - name: Restore repo cache
        uses: actions/cache@v4
        with:
          path: kernel_workspace/.repo
          key: repo-${{ inputs.android_version }}-${{ inputs.kernel_version }}
      
      # - name: Initialize and Sync Kernel Source
      #   run: |
      #     mkdir -p kernel_workspace && cd kernel_workspace
          
      #     echo "Initializing and syncing kernel source..."
      #     repo init -u https://github.com/TukangHantam/kernel_manifest.git -b "${{ inputs.android_version }}" -m "${{ inputs.kernel_version }}.xml" --repo-rev=stable --depth=1 --no-clone-bundle --no-tags
      #     repo sync -c -j$(nproc --all) --no-clone-bundle --no-tags --force-sync
          
      #     VERSION=$(grep '^VERSION' ./common/Makefile | cut -d '=' -f2 | xargs)
      #     PATCHLEVEL=$(grep '^PATCHLEVEL' ./common/Makefile | cut -d '=' -f2 | xargs)
      #     SUBLEVEL=$(grep '^SUBLEVEL' ./common/Makefile | cut -d '=' -f2 | xargs)
      #     echo "SERIES=${VERSION}.${PATCHLEVEL}" >> $GITHUB_ENV
            
      #     # Full kernel version
      #     echo "KERNEL_VER=${VERSION}.${PATCHLEVEL}.${SUBLEVEL}" >> $GITHUB_ENV
      
      - name: etst
        run: |
          mkdir -p kernel_workspace && cd kernel_workspace
          aria2c -s16 -x16 -k1M https://github.com/TukangHantam/android_kernel_xiaomi_mt6899/archive/refs/heads/${{ inputs.kernel_version }}.zip -o common.zip && 
          unzip -q common.zip && 
          mv "android_kernel_xiaomi_mt6899-${{ inputs.kernel_version }}" common &&
          rm -rf common.zip &

          wait

      - name: Testing d9usaif
        run: |
          cd kernel_workspace
          ls -la
          VERSION=$(grep '^VERSION' ./common/Makefile | cut -d '=' -f2 | xargs)
          PATCHLEVEL=$(grep '^PATCHLEVEL' ./common/Makefile | cut -d '=' -f2 | xargs)
          SUBLEVEL=$(grep '^SUBLEVEL' ./common/Makefile | cut -d '=' -f2 | xargs)
          echo "SERIES=${VERSION}.${PATCHLEVEL}" >> $GITHUB_ENV

          # Full kernel version
          echo "KERNEL_VER=${VERSION}.${PATCHLEVEL}.${SUBLEVEL}" >> $GITHUB_ENV
          
      - name: Add KernelSU & Apply SUSFS Patches
        run: |
          # Clone repositories
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ inputs.android_version }}-${{ env.SERIES }}
          git clone https://github.com/TukangHantam/kernel_patches.git
          git clone https://github.com/TukangHantam/AnyKernel3.git

          cd kernel_workspace
          if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
            echo "Adding KernelSU Next..."
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
            echo "Adding KernelSU SukiSU..."
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          fi
          
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-$SERIES.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cp ../kernel_patches/69_hide_stuff.patch ./common/
          
          if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
            echo "Applying SUSFS patches for KernelSU Next..."
            cd ./KernelSU-Next

            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            cp ../../kernel_patches/next/apk_sign.patch ./
            cp ../../kernel_patches/next/core_hook.patch ./
            cp ../../kernel_patches/next/kernel_compat.patch ./
            patch -p1 --forward < 10_enable_susfs_for_ksu.patch  || true
            patch -p1 -F 3 < apk_sign.patch
            patch -p1 -F 3 < core_hook.patch
            patch -p1 -F 3 < kernel_compat.patch
            
            KSU_VERSION=$(expr $(curl -sI "https://api.github.com/repos/pershoot/KernelSU-Next/commits?sha=next&per_page=1" | grep -i "link:" | sed -n 's/.*page=\([0-9]*\)>; rel="last".*/\1/p') "+" 10200)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
            echo "Applying SUSFS patches  for SukiSU..."
            cd ./KernelSU
            KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/Makefile" | grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
            KSU_COMMIT_HASH=$(git rev-parse --short HEAD)
            KSU_VERSION_FULL="v$KSU_API_VERSION-$KSU_COMMIT_HASH@hxmn404"
            sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
            sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
            sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile

            VERSION_DEFINITIONS=$'define get_ksu_version_full\n$KSU_VERSION_FULL\nendef\n\nKSU_VERSION_API := '"$KSU_API_VERSION"$'\nKSU_VERSION_FULL := '"$KSU_VERSION_FULL"
            awk -v def="$VERSION_DEFINITIONS" '
              /REPO_OWNER :=/ {print; print def; inserted=1; next}
              1
              END {if (!inserted) print def}
            ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile
            
            KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

            grep -A10 "REPO_OWNER" kernel/Makefile
            grep "KSU_VERSION_FULL" kernel/Makefile
          else
            echo "Invalid KernelSU variant selected!"
            exit 1
          fi

          cd ../common
          SUSFS_VERSION=$(grep '#define SUSFS_VERSION' ./include/linux/susfs.h | awk -F'"' '{print $2}')
          echo "SUSFS_VERSION=$SUSFS_VERSION" >> $GITHUB_ENV
          if [ "${{ inputs.android_version }}" = "android15" ] && [ "${{ inputs.kernel_version }}" = "6.6.30" ]; then
            if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
                sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
            fi
          fi
          patch -p1 -F 3 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ env.SERIES }}.patch || true
          patch -p1 -F 3 < 69_hide_stuff.patch
          
      - name: Apply Hooks Patches
        run: |
          cd kernel_workspace/common

          if [ "${{ inputs.kernelsu_variant }}" = "KernelSU-Next" ]; then
            echo "Applying hooks for KernelSU-Next..."
            cp ../../kernel_patches/next/scope_min_manual_hooks_v1.5.patch ./
            patch -p1 -F 3 < scope_min_manual_hooks_v1.5.patch
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ]; then
            echo "Applying hooks for SukiSU..."
            if [ "${{ inputs.hook }}" = "Manual" ]; then
              cp ../../kernel_patches/sukisu/scope_min_manual_hooks_v1.5.patch ./
              patch -p1 -F 3 < scope_min_manual_hooks_v1.5.patch
            elif [ "${{ inputs.hook }}" = "Tracepoint" ]; then
              cp ../../kernel_patches/sukisu/tracepoint_hooks.patch ./
              patch -p1 -F 3 < tracepoint_hooks.patch
            fi
          fi
          
      - name: Apply LZ4 V1.10.0, LZ4KD & ZSTDN patches
        run: |
          echo "Applying Zram patch"
          cd kernel_workspace/common
          files=(
              "lib/lz4/lz4_compress.c"
              "lib/lz4/lz4_decompress.c"
              "lib/lz4/lz4defs.h"
              "lib/lz4/lz4hc_compress.c"
          )

          for file in "${files[@]}"; do
            if [ -e "$file" ]; then
              rm "$file"
              echo "$file has been deleted"
            else
              echo "$file does not exist"
            fi
          done

          cp -r ../../kernel_patches/zram/lz4/lib/* ./lib/
          cp -r ../../kernel_patches/zram/lz4/include/linux/* ./include/linux/
          cp -r ../../kernel_patches/zram/lz4/crypto/* ./crypto/
          cp -r ../../kernel_patches/zram/${{ env.SERIES }}/lz4_1.10.0.patch ./
          cp ../../kernel_patches/zram/${{ env.SERIES }}/lz4kd.patch ./
          patch -p1 -F 3 < lz4_1.10.0.patch || true
          patch -p1 -F 3 < lz4kd.patch || true
          echo 'Completed Zram patch'
          
          # Check if the file exists
          if [ -f "fs/f2fs/Makefile" ]; then
            # Check if the specified line is included
            if ! grep -qF "f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o" "fs/f2fs/Makefile"; then
              echo "f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o" >> "fs/f2fs/Makefile"
              echo "Added: f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o"
            else
              echo "File already contains: f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o"
            fi
          else
            echo "File does not exist: fs/f2fs/Makefile"
          fi

      - name: LZ4KD & ZSTDN Configuration
        if: ${{ inputs.use_zram }}
        run: |
          set -x
          set -e
          echo "Write LZ4KD & ZSTDN config dependency"
          CONFIG_FILE="kernel_workspace/common/arch/arm64/configs/gki_defconfig"

          if [ "${{ env.SERIES }}" = "6.6" ] && [ "${{ inputs.android_version }}" = "android15" ]; then
            echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
            sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
            sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "kernel_workspace/common/modules.bzl"
            echo "CONFIG_MODULE_SIG_FORCE=n" >> "$CONFIG_FILE"
          fi
          
          if grep -q "CONFIG_ZSMALLOC=y" "$CONFIG_FILE" && grep -q "CONFIG_ZRAM=y" "$CONFIG_FILE"; then
            echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
          fi

      - name: Apply Linux Security Modules (LSM)
        if: ${{ inputs.use_lsm }}
        run: |
          cd kernel_workspace/common
          echo "Enabling kernel-level baseband protection support..."
          curl -LSs https://raw.githubusercontent.com/TukangHantam/Baseband-guard/main/setup.sh | bash
          
      - name: Add Configuration Settings
        run: |
          cd kernel_workspace
          
          FILE="./common/arch/arm64/configs/gki_defconfig"
          set_config() {
            KEY="$1"
            VALUE="$2"
        
            if [ "$KEY" = "CONFIG_LSM" ]; then
                LINE="$KEY=\"$VALUE\""
            else
                LINE="$KEY=$VALUE"
            fi
        
            if grep -q "^$KEY=" "$FILE"; then
              CURRENT_VALUE=$(grep "^$KEY=" "$FILE" | head -n1 | cut -d'=' -f2-)
              if [ "$KEY" = "CONFIG_LSM" ]; then
                CURRENT_VALUE=$(echo "$CURRENT_VALUE" | sed 's/^"//;s/"$//')
              fi
        
              if [ "$CURRENT_VALUE" != "$VALUE" ]; then
                echo "Updating $KEY from $CURRENT_VALUE to $VALUE"
                sed -i "s|^$KEY=.*|$LINE|" "$FILE"
              else
                echo "$KEY is already set to $VALUE — skipping"
              fi
            else
              echo "Adding $LINE"
              echo "$LINE" >> "$FILE"
            fi
          }
          
          # KSU Configuration
          set_config CONFIG_KSU y
          MODEKPM=$([ "${{ inputs.use_kpm }}" = "true" ] && [ "${{ inputs.kernelsu_variant }}" = "SukiSU-Ultra" ] && echo "KPM" || echo "NoKPM")
          [ "$MODEKPM" = "KPM" ] && set_config CONFIG_KPM y
          echo "MODEKPM=$MODEKPM" >> $GITHUB_ENV
          if [ "${{ inputs.hook }}" = "Kprobes" ]; then
            set_config CONFIG_KSU_SUSFS_SUS_SU y
            set_config CONFIG_KSU_KPROBES_HOOK y
            set_config CONFIG_KPROBES y
          elif [ "${{ inputs.hook }}" = "Manual" ]; then
            set_config CONFIG_KSU_SUSFS_SUS_SU n
            set_config CONFIG_KSU_MANUAL_HOOK y
          elif [ "${{ inputs.hook }}" = "Tracepoint" ]; then
            set_config CONFIG_KSU_SUSFS_SUS_SU n
            set_config CONFIG_KSU_TRACEPOINT_HOOK y
          fi
          
          # File system level compression support
          set_config CONFIG_F2FS_FS_COMPRESSION y
          set_config CONFIG_F2FS_FS_LZ4 y
          set_config CONFIG_F2FS_FS_LZ4HC y
          
          # TMPFS Configuration
          set_config CONFIG_RCU_TRACE n
          set_config CONFIG_TMPFS_XATTR y
          set_config CONFIG_TMPFS_POSIX_ACL y

          # NF Configuration
          set_config CONFIG_IP_NF_TARGET_TTL y
          set_config CONFIG_IP6_NF_TARGET_HL y
          set_config CONFIG_IP6_NF_MATCH_HL y
          set_config CONFIG_IP_NF_TARGET_ECN y
          
          # ECN Configuration
          set_config CONFIG_IP_ECN y
          set_config CONFIG_TCP_ECN y
          set_config CONFIG_IPV6_ECN y
          
          # SUSFS Configuration
          set_config CONFIG_KSU_SUSFS y
          set_config CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT y
          set_config CONFIG_KSU_SUSFS_SUS_PATH y
          set_config CONFIG_KSU_SUSFS_SUS_MOUNT y
          set_config CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT y
          set_config CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT y
          set_config CONFIG_KSU_SUSFS_SUS_KSTAT y
          set_config CONFIG_KSU_SUSFS_SUS_OVERLAYFS n
          set_config CONFIG_KSU_SUSFS_TRY_UMOUNT y
          set_config CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT y
          set_config CONFIG_KSU_SUSFS_SPOOF_UNAME y
          set_config CONFIG_KSU_SUSFS_ENABLE_LOG y
          set_config CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS y
          set_config CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG y
          set_config CONFIG_KSU_SUSFS_OPEN_REDIRECT y

          # AutoFDO Configuration (Feedback-Directed Optimization)
          set_config CONFIG_AUTOFDO_CLANG y

          # BBR Configuration
          if [ "${{ inputs.use_bbr }}" = "true" ]; then
            set_config CONFIG_NET_SCH_FQ y
            set_config CONFIG_TCP_CONG_ADVANCED y
            set_config CONFIG_TCP_CONG_BBR y
            set_config CONFIG_TCP_CONG_BIC n
            set_config CONFIG_TCP_CONG_WESTWOOD n
            set_config CONFIG_TCP_CONG_HTCP n
            set_config CONFIG_DEFAULT_BBR y
          fi

          # Linux Security Modules (LSM)
          if [ "${{ inputs.use_lsm }}" = "true" ]; then
            set_config CONFIG_BBG y
            set_config CONFIG_LSM "landlock,lockdown,yama,loadpin,safesetid,selinux,smack,tomoyo,apparmor,bpf,baseband_guard"
          fi

          # Build Optimization Configuration
          set_config CONFIG_LTO_CLANG_THIN y
          set_config CONFIG_LTO_CLANG y
          set_config CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE y
          
          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Change Kernel Name
        run: |
          cd kernel_workspace
          
          # Set Kernel Name
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
          if [ "${{ inputs.kernel_version }}" = "6.6.30" ]; then
            echo "TIME_BUILD=Thu Aug 29 05:01:15 UTC 2024" >> $GITHUB_ENV
            sudo sed -i 's/-4k/-android15-8-g94c1a24cabd5-ab12293704-4k/g' ./common/arch/arm64/configs/gki_defconfig
          elif [ "${{ inputs.kernel_version }}" = "6.6.56" ]; then
            echo "TIME_BUILD=Tue Mar 11 12:18:17 UTC 2025" >> $GITHUB_ENV
            sudo sed -i 's/-4k/-android15-8-g7f19c751e334-ab13222567-4k/g' ./common/arch/arm64/configs/gki_defconfig
          fi
          
          # Remove Abi Exports and Error
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' ./common/BUILD.bazel
          rm -rf ./common/android/abi_gki_protected_exports_*
            
      - name: Build
        run : |
          set -e
          set -x
          cd kernel_workspace/common
          
          export KBUILD_BUILD_TIMESTAMP="${{ env.TIME_BUILD }}"
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/prebuilts/kernel-build-tools/linux-x86/bin:$PATH"
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/prebuilts/rust/linux-x86/1.73.0b/bin:$PATH"
          export PATH="/usr/lib/ccache:$PATH"

          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 gki_defconfig || { echo "make gki_defconfig failed"; exit 1; }
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 Image || { echo "make Image failed"; exit 1; }

      # - name: 📦 Apply KPM Patch (SukiSU only)
      #   if: ${{ inputs.use_kpm }}
      #   run: |
      #     cd kernel_workspace/common/out/arch/arm64/boot
      #     TAG=$(curl -s https://api.github.com/repos/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases | jq -r 'map(select(.prerelease == false and .draft == false)) | first | .tag_name')
      #     echo "Latest tag is: $TAG"
      #     curl -LSs -o patch_linux "https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/$TAG/patch_linux"
      #     chmod +x patch_linux
      #     ./patch_linux
      #     rm -f Image
      #     mv oImage Image
      
      - name: 📦 Make AnyKernel3
        run: |
          cd ./AnyKernel3
          ZIP_NAME="AnyKernel3_${{ env.KERNEL_VER }}_${{ inputs.kernelsu_variant }}_${{ env.KSUVER }}.zip"
          cp ../kernel_workspace/common/out/arch/arm64/boot/Image ./Image
          zip -q -r "../$ZIP_NAME" ./*
            
      - name: 📤 Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_${{ env.KERNEL_VER }}_${{ inputs.kernelsu_variant }}_${{ env.KSUVER }}
          path: ./AnyKernel3/*

      - name: Package files for telegram
        if: ${{ inputs.upload_tg }}
        run: |
          echo "Packing files..."
          ESCAPED_KERNEL_VER=$(echo "${{ env.KERNEL_VER }}" | sed -e 's/\./\\./g' -e 's/-/\\-/g')
          ESCAPED_KSU_VARIANT=$(echo "${{ inputs.kernelsu_variant }} (${{ env.KSUVER }})" | sed -e 's/\./\\./g' -e 's/-/\\-/g' -e 's/(/\\(/g' -e 's/)/\\)/g')
          ESCAPED_SUSFS_VER=$(echo "${{ env.SUSFS_VERSION }}" | sed -e 's/\./\\./g')
          cat > release.txt << EOF
          >KernelVer: $ESCAPED_KERNEL_VER
          >DriverKSU: $ESCAPED_KSU_VARIANT
          >SUSFS ඞ: $ESCAPED_SUSFS_VER \(${{ inputs.hook }} Hook\)
          EOF
          
          cat >> release.txt << 'EOF'
          📝 Features:
          ```
          [+] LZ4 v1.10.0 & LZ4KD (ZRAM)
          [+] BBR Algorithm + ECN Support
          [+] TMPFS XATTR + POSIX ACL Support
          [+] Kernel-level Baseband Protection Support```
          ⬇ How To Flash:
          >Use flashing software, such as [Horizon Kernel Flasher](https://github.com/libxzr/HorizonKernelFlasher/releases/download/v1.3/app-release.apk) for flashing the kernel \(Give root access to the Application\)
          EOF
          
      - name: Upload to telegram
        if: ${{ inputs.upload_tg }}
        uses: puernya/tg-bot-upload@v1
        with:
          bot-id: ${{ secrets.BOT_ID }}
          chat-id: ${{ secrets.CHAT_ID }}
          topic-id: ${{ secrets.TOPIC_ID }} 
          file-path: |
                  *.zip
          caption-path: release.txt

      - name: 📊 Post-build disk check
        run: |
          echo "Available storage:"
          sudo df -h
